Imports System.Net.Mail
Imports System.Xml.XPath
Imports System.Xml
Imports System.Diagnostics
Imports System.IO
Imports system.Configuration

Partial Class Forms_postpay
   Inherits System.Web.UI.Page
   Private _HTTP_HOST As String
   Public Property HTTP_HOST() As String
      Get
         Return _HTTP_HOST
      End Get
      Set(ByVal value As String)
         _HTTP_HOST = value
      End Set
   End Property
   Private _REMOTE_ADDR As String
   Public Property REMOTE_ADDR() As String
      Get
         Return _REMOTE_ADDR
      End Get
      Set(ByVal value As String)
         _REMOTE_ADDR = value
      End Set
   End Property
   Private _USER1 As String
   ''' <summary>
   ''' USER1 is used mainly for sending the id in the database of the online registration.
   ''' Used to change the status from Submitted to Paid
   ''' If a registration need to be also pushed to SM, this field will have two ids separated by :
   ''' The first is the id for the NamePurchasedServicePurchased.NamePurchasedServicePurchasedId in UJMAIN database and the second is for the CourseRegistration.CORegistrationId in the AJUMain database
   ''' </summary>
   ''' <value></value>
   ''' <returns></returns>
   ''' <remarks></remarks>
   Public Property USER1() As String
      Get
         Return _USER1
      End Get
      Set(ByVal value As String)
         _USER1 = value.Trim
      End Set
   End Property
   Private _USER2 As String
   ''' <summary>
   ''' USER2 is used for sending the online form name which can be assoicated with email from, to name when sending confirmation
   ''' </summary>
   ''' <value></value>
   ''' <returns></returns>
   ''' <remarks></remarks>
   Public Property USER2() As String
      Get
         Return _USER2
      End Get
      Set(ByVal value As String)
         _USER2 = value
      End Set
   End Property
   Private _USER3 As String
   Public Property USER3() As String
      Get
         Return _USER3
      End Get
      Set(ByVal value As String)
         _USER3 = value
      End Set
   End Property
   'there are up to USER10 but we never used more than 3

   Private _AUTHCODE As String
   ''' <summary>
   ''' For Authorization and Sale credit card transactions, transactions approved by
   ''' the issuing bank receive this bank authorization code.
   ''' </summary>
   ''' <value></value>
   ''' <returns></returns>
   ''' <remarks></remarks>
   Public Property AUTHCODE() As String
      Get
         Return _AUTHCODE
      End Get
      Set(ByVal value As String)
         _AUTHCODE = value
      End Set
   End Property
   Private _AVSDATA As String
   ''' <summary>
   ''' Returns a three-character response (for example, YNY). The characters are
   '''defined as follows:
   ''' AVS Street Match: Y (match), N (no match) or X (service not supported or not
   ''' completed)
   ''' AVS ZIP Match: Y (match), N (no match) or X (service unavailable or not
   '''completed).
   '''AVS OR Operation: Compares the AVS Street and AVS ZIP values. If either
   ''' or both values are Y, then the AVS OR Operation value is set to Y. Otherwise,
   ''' the AVS OR Operation field is set to N.
   ''' </summary>
   ''' <value></value>
   ''' <returns></returns>
   ''' <remarks></remarks>
   Public Property AVSDATA() As String
      Get
         Return _AVSDATA
      End Get
      Set(ByVal value As String)
         _AVSDATA = value
      End Set
   End Property
   Private _HOSTCODE As String
   ''' <summary>
   ''' HOSTCODE is returned only for TeleCheck transactions - Not applicable to us at this point (Aug 2012)
   ''' </summary>
   ''' <value></value>
   ''' <returns></returns>
   ''' <remarks></remarks>
   Public Property HOSTCODE() As String
      Get
         Return _HOSTCODE
      End Get
      Set(ByVal value As String)
         _HOSTCODE = value
      End Set
   End Property
   Private _PNREF As String
   ''' <summary>
   ''' Payment Network Reference ID (PNREF), a number generated by PayPal that
   '''uniquely identifies the transaction. You can use this identifier to refer to the
   '''original transaction when performing credit, void, or delayed capture
   '''transactions from PayPal Manager.
   '''This value is displayed on PayPal Manager reports as Transaction ID, on the
   '''Receipt page as Order ID, and appears in email receipts to both merchant and
   '''customer.
   ''' </summary>
   ''' <value></value>
   ''' <returns></returns>
   ''' <remarks></remarks>
   Public Property PNREF() As String
      Get
         Return _PNREF
      End Get
      Set(ByVal value As String)
         _PNREF = value
      End Set
   End Property
   Private _RESPMSG As String
   ''' <summary>
   ''' The response message returned with the transaction RESULT code. Exact
   '''wording of the RESPMSG varies. Sometimes a colon will appear after the
   '''initial RESPMSG followed by a more detailed description.
   '''If you are using AVS or card security code checking, PayPal voids any
   '''transactions for which the returned value does not meet your configured
   '''criterion. For this Void transaction, the RESPMSG is AVSDECLINED or
   '''CSCDECLINED and RESULT=0.
   '''NOTE: Be sure to look at the response message for your transaction. Even if
   '''your result code is 0, your response message might say that the
   '''transaction has failed.
   ''' </summary>
   ''' <value></value>
   ''' <returns></returns>
   ''' <remarks></remarks>
   Public Property RESPMSG() As String
      Get
         Return _RESPMSG
      End Get
      Set(ByVal value As String)
         _RESPMSG = value
      End Set
   End Property
   Private _RESULT As String
   ''' <summary>
   ''' The outcome of the attempted transaction. RESULT=0 indicates the transaction
   '''was approved, any other number indicates a decline or error.
   ''' </summary>
   ''' <value></value>
   ''' <returns></returns>
   ''' <remarks></remarks>
   Public Property RESULT() As String
      Get
         Return _RESULT
      End Get
      Set(ByVal value As String)
         _RESULT = value
      End Set
   End Property
   'from here all properties are returned as they were received by Payflow link when we submitted it
   Private _ADDRESS As String
   Public Property ADDRESS() As String
      Get
         Return _ADDRESS
      End Get
      Set(ByVal value As String)
         _ADDRESS = value
      End Set
   End Property

   Private _AMOUNT As String
   Public Property AMOUNT() As String
      Get
         Return _AMOUNT
      End Get
      Set(ByVal value As String)
         _AMOUNT = value
      End Set
   End Property
   Private _CITY As String
   Public Property CITY() As String
      Get
         Return _CITY
      End Get
      Set(ByVal value As String)
         _CITY = value
      End Set
   End Property
   Private _COUNTRY As String
   Public Property COUNTRY() As String
      Get
         Return _COUNTRY
      End Get
      Set(ByVal value As String)
         _COUNTRY = value
      End Set
   End Property
   Private _CSCMATCH As String
   ''' <summary>
   ''' (Card Security Code match response. The cardholder’s bank returns
   '''a Y, N, or X response on whether the submitted CSC matches the number on
   '''file at the bank.
   ''' </summary>
   ''' <value></value>
   ''' <returns></returns>
   ''' <remarks></remarks>
   Public Property CSCMATCH() As String
      Get
         Return _CSCMATCH
      End Get
      Set(ByVal value As String)
         _CSCMATCH = value
      End Set
   End Property

   Private _CUSTID As String
   Public Property CUSTID() As String
      Get
         Return _CUSTID
      End Get
      Set(ByVal value As String)
         _CUSTID = value
      End Set
   End Property
   Private _DESCRIPTION As String
   Public Property DESCRIPTION() As String
      Get
         Return _DESCRIPTION
      End Get
      Set(ByVal value As String)
         _DESCRIPTION = value
      End Set
   End Property
   Private _EMAIL As String
   Public Property EMAIL() As String
      Get
         Return _EMAIL
      End Get
      Set(ByVal value As String)
         _EMAIL = value
      End Set
   End Property
   Private _FAX As String
   Public Property FAX() As String
      Get
         Return _FAX
      End Get
      Set(ByVal value As String)
         _FAX = value
      End Set
   End Property
   Private _INVOICE As String
   Public Property INVOICE() As String
      Get
         Return _INVOICE
      End Get
      Set(ByVal value As String)
         _INVOICE = value
      End Set
   End Property
   Private _METHOD As String
   Public Property METHOD() As String
      Get
         Return _METHOD
      End Get
      Set(ByVal value As String)
         _METHOD = value
      End Set
   End Property
   Private _NAME As String
   Public Property NAME() As String
      Get
         Return _NAME
      End Get
      Set(ByVal value As String)
         _NAME = value
      End Set
   End Property
   Private _PHONE As String
   Public Property PHONE() As String
      Get
         Return _PHONE
      End Get
      Set(ByVal value As String)
         _PHONE = value
      End Set
   End Property
   Private _PONUM As String
   Public Property PONUM() As String
      Get
         Return _PONUM
      End Get
      Set(ByVal value As String)
         _PONUM = value
      End Set
   End Property
   Private _STATE As String
   Public Property STATE() As String
      Get
         Return _STATE
      End Get
      Set(ByVal value As String)
         _STATE = value
      End Set
   End Property
   Private _TYPE As String
   Public Property TYPE() As String
      Get
         Return _TYPE
      End Get
      Set(ByVal value As String)
         _TYPE = value
      End Set
   End Property
   Private _ZIP As String
   Public Property ZIP() As String
      Get
         Return _ZIP
      End Get
      Set(ByVal value As String)
         _ZIP = value
      End Set
   End Property
   Private _connectionStringNPSP As String
   Public Property connectionStringNSPS() As String
      Get
         Return _connectionStringNPSP
      End Get
      Set(ByVal value As String)
         _connectionStringNPSP = value
      End Set
   End Property
   Private _connectionStringCR As String
   Public Property connectionStringCR() As String
      Get
         Return _connectionStringCR
      End Get
      Set(ByVal value As String)
         _connectionStringCR = value
      End Set
   End Property

   Private _nameProductServicePurchasedId As Integer
   Public Property nameProductServicePurchasedId() As Integer
      Get
         Return _nameProductServicePurchasedId
      End Get
      Set(ByVal value As Integer)
         _nameProductServicePurchasedId = value
      End Set
   End Property
   Private _courseRegistrationId As Integer
   Public Property courseRegistrationId() As Integer
      Get
         Return _courseRegistrationId
      End Get
      Set(ByVal value As Integer)
         _courseRegistrationId = value
      End Set
   End Property
   Private _emailFromName As String
   Public Property emailFromName() As String
      Get
         Return _emailFromName
      End Get
      Set(ByVal value As String)
         _emailFromName = value
      End Set
   End Property
   Private _emailFrom As String
   Public Property emailFrom() As String
      Get
         Return _emailFrom
      End Get
      Set(ByVal value As String)
         _emailFrom = value
      End Set
   End Property
   Private _emailTo As String
   Public Property emailTo() As String
      Get
         Return _emailTo
      End Get
      Set(ByVal value As String)
         _emailTo = value
      End Set
   End Property

   Private _message As String
   Public Property message() As String
      Get
         Return _message
      End Get
      Set(ByVal value As String)
         _message = value
      End Set
   End Property
   Private _emailSubject As String
   Public Property emailSubject() As String
      Get
         Return _emailSubject
      End Get
      Set(ByVal value As String)
         _emailSubject = value
      End Set
   End Property

   Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
      'the page is going to be loaded only once (the call from Payflow)
      'This page receives HTML post form PayFlowLink with different HTML variables
      'Send email confirmations as needed and update database
      'Populate the properties
      Dim obr As New BrokenRules
      Dim postPayCalledMessage As String = "" 'Holds a message
      'as we reference USER make sure it is not nothing
      If USER1 Is Nothing = True Then
         USER1 = ""
      End If
      connectionStringNSPS = GetConnectionString("ujmain")
      connectionStringCR = GetConnectionString("courseregistration")
      loadProperties() 'set properties from request()
      'always send email PostPay called in case something fails 
      postPayCalledMessage = preparePostPayCalledMessage()
      If 1 = 1 Then
         obr = SendMail(postPayCalledMessage, "PostPay.aspx called " & Now.ToString, "website@ajula.edu", "postPay", "myalovsky@ajula.edu")
         If obr.IsValid = False Then
            'We cannot lose information so if the mailing does not work, let's save it in a file. 
            Log("postpayErr.txt", "Sending the PostPaycalled email failed. The content is  " + postPayCalledMessage + " the error of SendMail is " + obr.ToString)
         End If
      End If

      'get information from the new XML file
      Dim ht As New Hashtable
      Dim oBRProcessing As New BrokenRules 'accumulate issue during the process - report to admin once
      'USER2 is used for identifying the online form name which can be assoicated with email from, to name when sending confirmation
      If String.IsNullOrEmpty(USER2) = False Then
         ht = GetPaymentSettings(USER2)
      Else
         ht = GetPaymentSettings("default")
      End If
      If ht.Count = 0 Then
         'we need yet another bullet proof method - hard code the ht. We should never lose a payment information. 
         'The hard coded 1 will not be flexible but at least something
         ht = getHardcodedSettings()
      End If
      'validate mimimal information
      If String.IsNullOrEmpty(validatePaymentInformation(ht)) = False Then
         ht = getHardcodedSettings()
      End If
      'send email
      Dim iPos As Integer = 0
      message = ht("message")
      emailSubject = ht("subject-line")
      emailFrom = ht("email-from")
      emailFromName = ht("email-from-name")
      emailTo = ht("inform-emails")
      Dim nps As New NameBO.ProductServicePurchased.NameProductServicePurchased(connectionStringNSPS)
      Dim crg As New CourseEventRegistration.CourseEventRegistration.Registration(connectionStringCR)
      Dim errMsg As String = ""
      Dim isSuccess As Boolean = False
      'update databases
      'if reference number has a : then updating both CourseRegistration and NameProductServicePurchased
      'if only 1 the only nameProductService
      iPos = USER1.IndexOf(":")
      If iPos > 0 Then
         Integer.TryParse(USER1.Substring(0, iPos), nameProductServicePurchasedId)
         Integer.TryParse(USER1.Substring(iPos + 1, USER1.Length - (iPos + 1)), courseRegistrationId)
      Else
         Integer.TryParse(USER1, nameProductServicePurchasedId)
      End If
      If nameProductServicePurchasedId > 0 Then
         'update ujmain.NameProductServicePurchased
         Try
            errMsg = nps.changeNameProductServicePurchasedStatus(nameProductServicePurchasedId, "submitted", "paid", nps.ConnetionString)
         Catch ex As Exception
            errMsg += "<br /> calling nps.changeNameProductServicePurchasedStatus failed with " + ex.Message
         End Try
         If String.IsNullOrEmpty(errMsg) = False Then
            'obr = SendMail("changing status of NameProductServicePurchased id = " + npspId.ToString + " failed with error " + errMsg, "postpay failed changing status for " + nameProductServicePurchasedId.ToString, "website@ajula.edu", "postpay", "myalovsky@ajula.edu")
            oBRProcessing.Add(errMsg)
         End If
      End If
      If courseRegistrationId > 0 Then
         'update AJUmain.CourseRegistration

         Try
            isSuccess = crg.ChangeStatus(courseRegistrationId, "paid", PNREF)
            If isSuccess = False Then
               oBRProcessing.Add("Changing status for " & courseRegistrationId.ToString + "failed. " + crg.ErrorMessage)
            End If
         Catch ex As Exception
            oBRProcessing.Add("<br /> calling nps.changeNameProductServicePurchasedStatus failed with " + ex.Message)
         End Try
      End If

      If oBRProcessing.IsValid = False Or USER1 Is Nothing Or (USER1 Is Nothing = False AndAlso USER1 = "") Or USER2 Is Nothing Or (USER2 Is Nothing = False AndAlso USER2 = "") Then
         'try notify admin
         notifyAdmin(oBRProcessing.ToString, ht)
      End If
      'send the the message anyways
      obr = New BrokenRules
      If RESULT = "0" Then
         message += "<br /> id = " + USER1 + " online payment ref = " + PNREF + " Was successfully completed"
      Else
         message += "<br /> id = " + USER1 + " online payment ref = " + PNREF + " Was NOT successfully completed - results <> 0"
      End If
      'refactor later
      message += "<br /> Name = " + NAME
      message += "<br /> Address = " + ADDRESS + " " + CITY + " " + STATE + " " + ZIP
      message += "<br /> Amount = " + AMOUNT
      message += "<br /> Description = " + DESCRIPTION
      message += "<br /> Email = " + EMAIL
      message += "<br /> Phone = " + PHONE
      message += "<br /> reference # = " + USER1
      message += "<br /> Result # = " + RESULT
      obr = SendMail(message, emailSubject, emailFrom, emailFromName, emailTo)
      'lblMessage.Text = "Subject:" + emailSubject + " message:" + message
   End Sub
   ''' <summary>
   ''' Loading the properties of this page with all the request parameters which then will be use in the different place in the page
   ''' Should not fail
   ''' </summary>
   ''' <remarks></remarks>
   Private Sub loadProperties()
      Try
         HTTP_HOST = Request.ServerVariables("HTTP_HOST")
         REMOTE_ADDR = Request.ServerVariables("REMOTE_ADDR")
         AUTHCODE = Request("AUTHCODE")
         AVSDATA = Request("AVSDATA")
         HOSTCODE = Request("HOSTCODE")
         PNREF = Request("PNREF")
         RESPMSG = Request("RESPMSG")
         RESULT = Request("RESULT")
         ADDRESS = Request("ADDRESS")
         AMOUNT = Request("AMOUNT")
         CITY = Request("CITY")
         COUNTRY = Request("COUNTRY")
         CSCMATCH = Request("CSCMATCH")
         CUSTID = Request("CUSTID")
         DESCRIPTION = Request("DESCRIPTION")
         EMAIL = Request("EMAIL")
         FAX = Request("FAX")
         INVOICE = Request("INVOICE")
         METHOD = Request("METHOD")
         NAME = Request("NAME")
         PHONE = Request("PHONE")
         PNREF = Request("PNREF")
         PONUM = Request("PONUM")
         STATE = Request("STATE")
         TYPE = Request("TYPE")
         USER1 = Request("USER1")
         USER2 = Request("USER2")
         USER3 = Request("USER3")
         ZIP = Request("ZIP")
      Catch ex As Exception

      End Try


   End Sub
   Private Function GetPaymentSettings(ByVal PaymentCode As String) As Hashtable
      Dim ht As Hashtable = New Hashtable
      Dim FileName As String = GetFileName()
      If FileName <> "" Then
         Dim doc As New XmlDocument()
         Try
            doc.Load(FileName)
            Dim de As XmlElement = doc.DocumentElement
            Dim oSectionNode As XmlNode = de.SelectSingleNode("//payments/payment/payflow-code[translate(.,'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')='" + PaymentCode.ToLower + "']")
            If Not oSectionNode Is Nothing Then
               'get the var nodes and search for the node
               Dim oSectionNodes As XmlNodeList = oSectionNode.ParentNode.ChildNodes
               Dim nd As XmlNode
               For Each nd In oSectionNodes
                  If nd.Name <> "sections" Then
                     ht.Add(nd.Name, nd.InnerText)
                  End If
               Next
            End If
         Catch ex As Exception

         End Try


      Else
         '
      End If

      Return ht
   End Function
   Private Function getHardcodedSettings() As Hashtable
      Dim ht As Hashtable = New Hashtable
      ht.Add("name", "default")
      ht.Add("payflow-code", "default")
      ht.Add("inform-emails", "myalovsky@ajula.edu")
      ht.Add("email-from", "website@ajula.edu")
      ht.Add("email-from-name", "AJU Online payment")
      ht.Add("admin-emails", "yalovsky@ajula.edu")
      ht.Add("subject-line", "Online payment confirmation")
      ht.Add("message", "This is a confirmation for payment received")
      getHardcodedSettings = ht
   End Function
   Friend Function GetFileName() As String
      Dim configPath As String = ""
      Dim configFileName As String = ""
      Try
         configPath = ConfigurationManager.AppSettings("AJUPayFlowXMLPath")
         configFileName = ConfigurationManager.AppSettings("AJUPayFlowXMLFileName")
      Catch ex As Exception

      End Try
      Dim FileName As String = ""
      Dim sReturn As String = ""
      If configFileName <> "" And configPath <> "" Then
         FileName = Server.MapPath(configPath + configFileName)
         If IO.File.Exists(FileName) Then
            sReturn = FileName
         End If
      End If
      GetFileName = sReturn
   End Function
   Private Sub notifyAdmin(ByVal Err As String, ByRef ht As Hashtable)
      Dim message As String = ""
      message = "Error occured when sending email<br />"
      message += ht("message")
      message += "Message " & ht("message") & "<br />"
      message += "Subject " & ht("subject") & "<br />"
      message += "fromEmail " & ht("email-from") & "<br />"
      message += "fromName " & ht("email-from-name") & "<br />"
      message += "toEmail " & ht("inform-emails") & "<br />"
      message += "<br /> Name = " + NAME
      message += "<br /> Address = " + ADDRESS + " " + CITY + " " + STATE + " " + ZIP
      message += "<br /> Amount = " + AMOUNT
      message += "<br /> Description = " + DESCRIPTION
      message += "<br /> Email = " + EMAIL
      message += "<br /> Phone = " + PHONE
      message += "<br /> reference # = " + USER1
      message += "<br /> Result # = " + RESULT
      message += "The error " & Err & "<br />"
      Dim obr As New BrokenRules
      obr = SendMail(message, "error occured in postpay.aspx when sending email", "website@ajula.edu", "Moshe", "myalovsky@ajula.edu")
      'lblError.Text = "Subject:" + "error occured in postpay.aspx when sending email message:" + message
   End Sub
   Private Function preparePostPayCalledMessage() As String
      Dim returnValue As String = "Postpay called at " + Now.ToString + "<br />" + vbCrLf
      Dim constr As String = ""
      returnValue += "HTTP_HOST=" + HTTP_HOST + "<br />" + vbCrLf
      returnValue += "REMOTE_ADDR=" + REMOTE_ADDR + "<br />" + vbCrLf
      returnValue += "AUTHCODE=" + AUTHCODE + "<br />" + vbCrLf
      returnValue += "AVSDATA=" + AVSDATA + "<br />" + vbCrLf
      returnValue += "HOSTCODE=" + HOSTCODE + "<br />" + vbCrLf
      returnValue += "PNREF=" + PNREF + "<br />" + vbCrLf
      returnValue += "RESPMSG=" + RESPMSG + "<br />" + vbCrLf
      returnValue += "RESULT=" + RESULT + "<br />" + vbCrLf
      returnValue += "ADDRESS=" + ADDRESS + "<br />" + vbCrLf
      returnValue += "AMOUNT=" + AMOUNT + "<br />" + vbCrLf
      returnValue += "CITY=" + CITY + "<br />" + vbCrLf
      returnValue += "COUNTRY=" + COUNTRY + "<br />" + vbCrLf
      returnValue += "CSCMATCH=" + CSCMATCH + "<br />" + vbCrLf
      returnValue += "CUSTID=" + CUSTID + "<br />" + vbCrLf
      returnValue += "DESCRIPTION=" + DESCRIPTION + "<br />" + vbCrLf
      returnValue += "EMAIL=" + EMAIL + "<br />" + vbCrLf
      returnValue += "FAX=" + FAX + "<br />" + vbCrLf
      returnValue += "INVOICE=" + INVOICE + "<br />" + vbCrLf
      returnValue += "METHOD=" + METHOD + "<br />" + vbCrLf
      returnValue += "NAME=" + NAME + "<br />" + vbCrLf
      returnValue += "PHONE=" + PHONE + "<br />" + vbCrLf
      returnValue += "PNREF=" + PNREF + "<br />" + vbCrLf
      returnValue += "PONUM=" + PONUM + "<br />" + vbCrLf
      returnValue += "STATE=" + STATE + "<br />" + vbCrLf
      returnValue += "TYPE=" + TYPE + "<br />" + vbCrLf
      returnValue += "USER1=" + USER1 + "<br />" + vbCrLf
      returnValue += "USER2=" + USER2 + "<br />" + vbCrLf
      returnValue += "USER3=" + USER3 + "<br />" + vbCrLf
      returnValue += "ZIP=" + ZIP + "<br />" + vbCrLf
      If String.IsNullOrEmpty(connectionStringNSPS) = True Then
         returnValue += "Connection string for ProductService database not found"
      Else
         If connectionStringNSPS.ToLower.IndexOf("server=") < 0 Or connectionStringNSPS.ToLower.IndexOf("pwd=") < 0 Then
            returnValue += "Connection string for ProductService might not be in the correct format =" + connectionStringNSPS + "<br />" + vbCrLf
         End If
      End If
      If USER1 Is Nothing = False AndAlso USER1.IndexOf(":") > -1 Then
         If String.IsNullOrEmpty(connectionStringCR) = True Then
            returnValue += "Connection string for course registration not found"
         Else
            If connectionStringNSPS.ToLower.IndexOf("server=") < 0 Or connectionStringCR.ToLower.IndexOf("pwd=") < 0 Then
               returnValue += "Connection string for course registration might not be in the correct format =" + connectionStringCR + "<br />" + vbCrLf
            End If
         End If

      End If
      preparePostPayCalledMessage = returnValue
   End Function

   Private Function validatePaymentInformation(ByVal ht As Hashtable) As String
      'check minimum data
      Dim oBR As New BrokenRules
      If String.IsNullOrEmpty(ht.Item("inform-emails")) = True Then
         oBR.Add("iform-emails was not defined")
      End If
      ' more to come
      validatePaymentInformation = oBR.ToString
   End Function
   Public Function SendMail(ByVal message As String, ByVal subject As String, ByVal FromEmail As String, ByVal FromName As String, ByVal toEmail As String) As BrokenRules
      Dim Errors As New BrokenRules
      Dim msg As New MailMessage()
      If FromEmail.IndexOf("@") = 1 Then
         Errors.Add("From email does not contain @ sign")
      End If
      If toEmail.IndexOf("@") = 1 Then
         Errors.Add("To email does not contain @ sign")
      End If

      If Errors.IsValid Then
         '  Set the message sender
         msg.From = New MailAddress(FromEmail, FromName)

         '  The .To property is a generic collection, 
         '  so we can add as many recipients as we like.
         Dim Receipents() As String
         Receipents = toEmail.Split(";")

         'msg.To.Add(New MailAddress("fox@foxcorp.org", "John Doe"))

         '  Set the content
         msg.Subject = subject
         msg.Body = message
         msg.IsBodyHtml = True
         'Get the smtp server
         Dim smtpName As String
         Dim credentialUserName As String
         Dim credentialPw As String
         smtpName = System.Configuration.ConfigurationManager.AppSettings("smptserver")
         credentialUserName = System.Configuration.ConfigurationManager.AppSettings("smtpauthenticationUserName")
         credentialPw = System.Configuration.ConfigurationManager.AppSettings("smtpauthenticationPW")

         Dim smtp As New SmtpClient(smtpName)

         ' You can choose several delivery methods. 
         ' Here we will use direct network delivery.
         smtp.DeliveryMethod = SmtpDeliveryMethod.Network
         ' authenticate against the server.
         Dim credential As New System.Net.NetworkCredential(credentialUserName, credentialPw)
         'first let's try with default credentials
         smtp.UseDefaultCredentials = True
         'smtp.Credentials = oCredential
         Try
            For i As Integer = 0 To Receipents.Length - 1
               msg.To.Add(Receipents(i))
               smtp.Send(msg)
               msg.To.Clear()
            Next
         Catch ex As Exception
            Errors.Add(ex.Message)
         End Try
      End If
      SendMail = Errors
   End Function
   Private Sub setupForTesting()
      'USER1 = txtUSER1.Text
      'USER2 = txtUSER2.Text
      'USER3 = txtUSER3.Text
      'RESULT = txtRESULT.Text
      'AMOUNT = txtAmount.Text
      'DESCRIPTION = txtDESCRIPTION.Text
   End Sub
   Private Function GetConnectionString(ByVal DB As String) As String
      Dim cValues As New System.Configuration.ConnectionStringSettings
      Dim sConnectionString As String = ""
      If DB.ToLower = "courseregistration" Then
         Try
            cValues = System.Configuration.ConfigurationManager.ConnectionStrings("CourseRegistration.DbConnection")
         Catch ex As Exception

         End Try
      Else
         Try
            cValues = System.Configuration.ConfigurationManager.ConnectionStrings("UJMain.DbConnection")
         Catch ex As Exception

         End Try
      End If
      Try
         sConnectionString = cValues.ConnectionString
      Catch ex As Exception

      End Try

      GetConnectionString = sConnectionString
   End Function
   Public Sub Log(ByVal FileName As String, ByVal Message As String)
      'Open a file for writing

      Dim mFileName As String = Server.MapPath(FileName)
      'Get a StreamReader class that can be used to read the file
      Dim objStreamWriter As StreamWriter
      objStreamWriter = File.AppendText(mFileName)

      'Append the the end of the string, "A user viewed this demo at: "
      'followed by the current date and time
      objStreamWriter.WriteLine(Message + " at: " & DateTime.Now.ToString())

      'Close the stream
      objStreamWriter.Close()
   End Sub
End Class
#Region "BrokenRules"


Public Class BrokenRules
   'the reason this is a copy of broken rules from util.vb as I would like to have this page depend on as little as possible
   Private m_cBrokenRules As Collection
   Private m_LineSeparator As String
   Public Sub New()
      ' initialize object here
      m_cBrokenRules = New Collection
      m_LineSeparator = "<br />"
   End Sub

   Public Property BrokenRules() As Collection
      Get
         Return m_cBrokenRules
      End Get
      Set(ByVal value As Collection)
         m_cBrokenRules = value
      End Set
   End Property
   Public Property LineSeparator() As String
      Get
         Return m_LineSeparator
      End Get
      Set(ByVal value As String)
         m_LineSeparator = value
      End Set
   End Property

   Public Overrides Function ToString() As String
      Dim i As Integer
      Dim s As String = ""
      For i = 1 To m_cBrokenRules.Count
         s = s & m_cBrokenRules(i) & m_LineSeparator
      Next i
      ToString = s
   End Function
   Public Sub Add(ByVal Description As String)
      m_cBrokenRules.Add(Description)
   End Sub
   Public Sub Add(ByVal Description As String, ByVal Key As Integer)
      m_cBrokenRules.Add(Description, Key)
   End Sub
   Public Function IsValid() As Boolean
      Dim bResult As Boolean
      bResult = False
      If Not m_cBrokenRules Is Nothing Then
         If m_cBrokenRules.Count = 0 Then
            bResult = True
         End If
      End If
      IsValid = bResult

   End Function
End Class
#End Region